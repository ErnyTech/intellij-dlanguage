module pointer;

import declarations;
import std.traits;

void main(string[] args){

}

static assert(!isImplicitlyConvertible!(TopLevel*, SubClass*));
static assert(!isImplicitlyConvertible!(TopLevel*, SubClass2*));
static assert(!isImplicitlyConvertible!(TopLevel*, SubSubClass*));
static assert(!isImplicitlyConvertible!(TopLevel*, SubSubClass2*));
static assert(!isImplicitlyConvertible!(TopLevel*, TopLevelInterface*));
static assert(!isImplicitlyConvertible!(TopLevel*, OtherInterface*));
static assert(!isImplicitlyConvertible!(SubClass*, TopLevel*));
static assert(!isImplicitlyConvertible!(SubClass*, SubClass2*));
static assert(!isImplicitlyConvertible!(SubClass*, SubSubClass*));
static assert(!isImplicitlyConvertible!(SubClass*, SubSubClass2*));
static assert(!isImplicitlyConvertible!(SubClass*, TopLevelInterface*));
static assert(!isImplicitlyConvertible!(SubClass*, OtherInterface*));
static assert(!isImplicitlyConvertible!(SubClass2*, TopLevel*));
static assert(!isImplicitlyConvertible!(SubClass2*, SubClass*));
static assert(!isImplicitlyConvertible!(SubClass2*, SubSubClass*));
static assert(!isImplicitlyConvertible!(SubClass2*, SubSubClass2*));
static assert(!isImplicitlyConvertible!(SubClass2*, TopLevelInterface*));
static assert(!isImplicitlyConvertible!(SubClass2*, OtherInterface*));
static assert(!isImplicitlyConvertible!(SubSubClass*, TopLevel*));
static assert(!isImplicitlyConvertible!(SubSubClass*, SubClass*));
static assert(!isImplicitlyConvertible!(SubSubClass*, SubClass2*));
static assert(!isImplicitlyConvertible!(SubSubClass*, SubSubClass2*));
static assert(!isImplicitlyConvertible!(SubSubClass*, TopLevelInterface*));
static assert(!isImplicitlyConvertible!(SubSubClass*, OtherInterface*));
static assert(!isImplicitlyConvertible!(SubSubClass2*, TopLevel*));
static assert(!isImplicitlyConvertible!(SubSubClass2*, SubClass*));
static assert(!isImplicitlyConvertible!(SubSubClass2*, SubClass2*));
static assert(!isImplicitlyConvertible!(SubSubClass2*, SubSubClass*));
static assert(!isImplicitlyConvertible!(SubSubClass2*, TopLevelInterface*));
static assert(!isImplicitlyConvertible!(SubSubClass2*, OtherInterface*));
static assert(!isImplicitlyConvertible!(TopLevelInterface*, TopLevel*));
static assert(!isImplicitlyConvertible!(TopLevelInterface*, SubClass*));
static assert(!isImplicitlyConvertible!(TopLevelInterface*, SubClass2*));
static assert(!isImplicitlyConvertible!(TopLevelInterface*, SubSubClass*));
static assert(!isImplicitlyConvertible!(TopLevelInterface*, SubSubClass2*));
static assert(!isImplicitlyConvertible!(TopLevelInterface*, OtherInterface*));
static assert(!isImplicitlyConvertible!(OtherInterface*, TopLevel*));
static assert(!isImplicitlyConvertible!(OtherInterface*, SubClass*));
static assert(!isImplicitlyConvertible!(OtherInterface*, SubClass2*));
static assert(!isImplicitlyConvertible!(OtherInterface*, SubSubClass*));
static assert(!isImplicitlyConvertible!(OtherInterface*, SubSubClass2*));
static assert(!isImplicitlyConvertible!(OtherInterface*, TopLevelInterface*));


static assert(!isAssignable!(TopLevel*, SubClass*));
static assert(!isAssignable!(TopLevel*, SubClass2*));
static assert(!isAssignable!(TopLevel*, SubSubClass*));
static assert(!isAssignable!(TopLevel*, SubSubClass2*));
static assert(!isAssignable!(TopLevel*, TopLevelInterface*));
static assert(!isAssignable!(TopLevel*, OtherInterface*));
static assert(!isAssignable!(SubClass*, TopLevel*));
static assert(!isAssignable!(SubClass*, SubClass2*));
static assert(!isAssignable!(SubClass*, SubSubClass*));
static assert(!isAssignable!(SubClass*, SubSubClass2*));
static assert(!isAssignable!(SubClass*, TopLevelInterface*));
static assert(!isAssignable!(SubClass*, OtherInterface*));
static assert(!isAssignable!(SubClass2*, TopLevel*));
static assert(!isAssignable!(SubClass2*, SubClass*));
static assert(!isAssignable!(SubClass2*, SubSubClass*));
static assert(!isAssignable!(SubClass2*, SubSubClass2*));
static assert(!isAssignable!(SubClass2*, TopLevelInterface*));
static assert(!isAssignable!(SubClass2*, OtherInterface*));
static assert(!isAssignable!(SubSubClass*, TopLevel*));
static assert(!isAssignable!(SubSubClass*, SubClass*));
static assert(!isAssignable!(SubSubClass*, SubClass2*));
static assert(!isAssignable!(SubSubClass*, SubSubClass2*));
static assert(!isAssignable!(SubSubClass*, TopLevelInterface*));
static assert(!isAssignable!(SubSubClass*, OtherInterface*));
static assert(!isAssignable!(SubSubClass2*, TopLevel*));
static assert(!isAssignable!(SubSubClass2*, SubClass*));
static assert(!isAssignable!(SubSubClass2*, SubClass2*));
static assert(!isAssignable!(SubSubClass2*, SubSubClass*));
static assert(!isAssignable!(SubSubClass2*, TopLevelInterface*));
static assert(!isAssignable!(SubSubClass2*, OtherInterface*));
static assert(!isAssignable!(TopLevelInterface*, TopLevel*));
static assert(!isAssignable!(TopLevelInterface*, SubClass*));
static assert(!isAssignable!(TopLevelInterface*, SubClass2*));
static assert(!isAssignable!(TopLevelInterface*, SubSubClass*));
static assert(!isAssignable!(TopLevelInterface*, SubSubClass2*));
static assert(!isAssignable!(TopLevelInterface*, OtherInterface*));
static assert(!isAssignable!(OtherInterface*, TopLevel*));
static assert(!isAssignable!(OtherInterface*, SubClass*));
static assert(!isAssignable!(OtherInterface*, SubClass2*));
static assert(!isAssignable!(OtherInterface*, SubSubClass*));
static assert(!isAssignable!(OtherInterface*, SubSubClass2*));
static assert(!isAssignable!(OtherInterface*, TopLevelInterface*));





//static assert(!isCovariantWith!(TopLevel function(), SubClass function()));
//static assert(!isCovariantWith!(TopLevel function(), SubClass2 function()));
//static assert(!isCovariantWith!(TopLevel function(), SubSubClass function()));
//static assert(!isCovariantWith!(TopLevel function(), SubSubClass2 function()));
//static assert(!isCovariantWith!(TopLevel function(), TopLevelInterface function()));
//static assert(!isCovariantWith!(TopLevel function(), OtherInterface function()));
//static assert(!isCovariantWith!(SubClass function(), TopLevel function()));
//static assert(!isCovariantWith!(SubClass function(), SubClass2 function()));
//static assert(!isCovariantWith!(SubClass function(), SubSubClass function()));
//static assert(!isCovariantWith!(SubClass function(), SubSubClass2 function()));
//static assert(!isCovariantWith!(SubClass function(), TopLevelInterface function()));
//static assert(!isCovariantWith!(SubClass function(), OtherInterface function()));
//static assert(!isCovariantWith!(SubClass2 function(), TopLevel function()));
//static assert(!isCovariantWith!(SubClass2 function(), SubClass function()));
//static assert(!isCovariantWith!(SubClass2 function(), SubSubClass function()));
//static assert(!isCovariantWith!(SubClass2 function(), SubSubClass2 function()));
//static assert(!isCovariantWith!(SubClass2 function(), TopLevelInterface function()));
//static assert(!isCovariantWith!(SubClass2 function(), OtherInterface function()));
//static assert(!isCovariantWith!(SubSubClass function(), TopLevel function()));
//static assert(!isCovariantWith!(SubSubClass function(), SubClass function()));
//static assert(!isCovariantWith!(SubSubClass function(), SubClass2 function()));
//static assert(!isCovariantWith!(SubSubClass function(), SubSubClass2 function()));
//static assert(!isCovariantWith!(SubSubClass function(), TopLevelInterface function()));
//static assert(!isCovariantWith!(SubSubClass function(), OtherInterface function()));
//static assert(!isCovariantWith!(SubSubClass2 function(), TopLevel function()));
//static assert(!isCovariantWith!(SubSubClass2 function(), SubClass function()));
//static assert(!isCovariantWith!(SubSubClass2 function(), SubClass2 function()));
//static assert(!isCovariantWith!(SubSubClass2 function(), SubSubClass function()));
//static assert(!isCovariantWith!(SubSubClass2 function(), TopLevelInterface function()));
//static assert(!isCovariantWith!(SubSubClass2 function(), OtherInterface function()));
//static assert(!isCovariantWith!(TopLevelInterface function(), TopLevel function()));
//static assert(!isCovariantWith!(TopLevelInterface function(), SubClass function()));
//static assert(!isCovariantWith!(TopLevelInterface function(), SubClass2 function()));
//static assert(!isCovariantWith!(TopLevelInterface function(), SubSubClass function()));
//static assert(!isCovariantWith!(TopLevelInterface function(), SubSubClass2 function()));
//static assert(!isCovariantWith!(TopLevelInterface function(), OtherInterface function()));
//static assert(!isCovariantWith!(OtherInterface function(), TopLevel function()));
//static assert(!isCovariantWith!(OtherInterface function(), SubClass function()));
//static assert(!isCovariantWith!(OtherInterface function(), SubClass2 function()));
//static assert(!isCovariantWith!(OtherInterface function(), SubSubClass function()));
//static assert(!isCovariantWith!(OtherInterface function(), SubSubClass2 function()));
//static assert(!isCovariantWith!(OtherInterface function(), TopLevelInterface function()));
